##############################################################################
# project configuration
##############################################################################

# Enable C++
language: cpp

dist: trusty
sudo: required
group: edge
addons:
  apt:
    packages:
      - "python3"
      - "python3-pip"

# Set python version to 3.6
python:
  - "3.6"

##############################################################################
# branch settings
##############################################################################
branches:
  except:
    - prototype/.*
    - gh-pages

##############################################################################
# Stages
##############################################################################

stages:
  - test
  - deploy

##############################################################################
# Agent Setup
##############################################################################

osx_agent: &osx_agent
  os: osx
  language: generic
  compiler: clang
  env: COMPILER=clang++

deploy_agent: &deploy_agent
  os: linux
  compiler: gcc
  env: COMPILER=g++-8
  addons:
    apt:
      sources: ['ubuntu-toolchain-r-test']
      packages: ['g++-8', 'ninja-build']

##############################################################################
# Jobs
##############################################################################

jobs:
  include:

    ###########################
    # Linux : clang sanitizer #
    ###########################

    # - name: "Linux clang++-6.0 Sanitizers"
    #   os: linux
    #   compiler: clang
    #   env:
    #     - COMPILER=clang++-6.0
    #     - CMAKE_OPTIONS="-DBIT_CORE_ENABLE_SANITIZER=On"
    #   addons:
    #     apt:
    #       sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-6.0']
    #       packages: ['g++-6', 'clang-6.0', 'ninja-build']

    ###############
    # Linux : GCC #
    ###############

    - name: "Linux g++-5 unit tests"
      os: linux
      compiler: gcc
      env: COMPILER=g++-5
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-5', 'ninja-build']

    - name: "Linux g++-6 unit tests"
      os: linux
      compiler: gcc
      env: COMPILER=g++-6
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-6', 'ninja-build']

    - name: "Linux g++-7 unit tests"
      os: linux
      compiler: gcc
      env: COMPILER=g++-7
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-7', 'ninja-build']

    - name: "Linux g++-8 unit tests"
      os: linux
      compiler: gcc
      env: COMPILER=g++-8
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-8', 'ninja-build']

    #################
    # Linux : clang #
    #################

    - name: "Linux clang++-3.5 unit tests"
      os: linux
      compiler: clang
      env: COMPILER=clang++-3.5
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.5']
          packages: ['g++-6', 'clang-3.5', 'ninja-build']

    - name: "Linux clang++-3.6 unit tests"
      os: linux
      compiler: clang
      env: COMPILER=clang++-3.6
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.6']
          packages: ['g++-6', 'clang-3.6', 'ninja-build']

    - name: "Linux clang++-3.7 unit tests"
      os: linux
      compiler: clang
      env: COMPILER=clang++-3.7
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.7']
          packages: ['g++-6', 'clang-3.7', 'ninja-build']

    - name: "Linux clang++-3.8 unit tests"
      os: linux
      compiler: clang
      env: COMPILER=clang++-3.8
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-6', 'clang-3.8', 'ninja-build']

    - name: "Linux clang++-3.9 unit tests"
      os: linux
      compiler: clang
      env: COMPILER=clang++-3.9
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-6', 'clang-3.9', 'ninja-build']

    - name: "Linux clang++-4.0 unit tests"
      os: linux
      compiler: clang
      env: COMPILER=clang++-4.0
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-4.0']
          packages: ['g++-6', 'clang-4.0', 'ninja-build']

    - name: "Linux clang++-5.0 unit tests"
      os: linux
      compiler: clang
      env: COMPILER=clang++-5.0
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-5.0']
          packages: ['g++-6', 'clang-5.0', 'ninja-build']

    - name: "Linux clang++-6.0 unit tests"
      os: linux
      compiler: clang
      env: COMPILER=clang++-6.0
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-6.0']
          packages: ['g++-6', 'clang-6.0', 'ninja-build']

    #################
    # macOS : clang #
    #################

    - <<: *osx_agent
      name: "macOS xcode8.3 unit tests"
      osx_image: xcode8.3

    - <<: *osx_agent
      name: "macOS xcode9 unit tests"
      osx_image: xcode9

    - <<: *osx_agent
      name: "macOS xcode9.1 unit tests"
      osx_image: xcode9.1

    - <<: *osx_agent
      name: "macOS xcode9.2 unit tests"
      osx_image: xcode9.2

    - <<: *osx_agent
      name: "macOS xcode9.3 unit tests"
      osx_image: xcode9.3

    - <<: *osx_agent
      name: "macOS xcode9.4 unit tests"
      osx_image: xcode9.4

    - <<: *osx_agent
      name: "macOS xcode10 unit tests"
      osx_image: xcode10

    ##########
    # Deploy #
    ##########

    - <<: *deploy_agent
      stage: deploy
      name: "Conan Deploy"
      if: branch = develop AND type = push
      script: .travis/deploy_conan.sh edge

    - <<: *deploy_agent
      stage: deploy
      name: "Conan Deploy"
      if: branch ~= ^release/.*$ AND type = push
      script: .travis/deploy_conan.sh prerelease

    - <<: *deploy_agent
      stage: deploy
      name: "Conan Deploy"
      if: branch = master AND type = push
      script: .travis/deploy_conan.sh stable

    - <<: *deploy_agent
      stage: deploy
      name: "Deploy Doxygen"
      if: branch = master AND type = push
      script: .travis/deploy_doxygen.sh

##############################################################################
# 1. Install Step
##############################################################################

before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      sudo apt-get update
      sudo apt-get install python3-pip
      sudo python3 -m pip install --upgrade --force setuptools
      sudo python3 -m pip install --upgrade --force pip
    fi

install:
  # Get CMake, ninja, pip, and Conan on Mac
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew update
      # Some OSX versions fail if already installed, so || this with true
      brew install cmake ninja python3 || true
      brew upgrade cmake ninja python3 || true
      python3 -m pip install conan==1.7.4
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      pip3 install --user conan
    fi


##############################################################################
# 2. Build Step
##############################################################################

before_script:
  # Detect architecture, and setup the remote
  - conan remote add cppbits https://api.bintray.com/conan/cppbits/conan
  - conan user

script:
  # Export the compiler
  - |
    if [[ "${COMPILER}" != "" ]]; then
      export CXX=${COMPILER}
    fi

  # Dump build information
  - uname -a
  - $CXX --version
  - cmake --version
  - ninja --version
  - python3 --version
  - conan --version

  # Compile and execute unit tests
  - mkdir -p build && cd build
  - conan install .. -odev_setup=True
  - cmake .. -G"Ninja" -DBIT_CORE_COMPILE_UNIT_TESTS=On -DBIT_CORE_COMPILE_SELF_CONTAINMENT_TESTS=On ${CMAKE_OPTIONS}
  - cmake --build . --config Release
  - ctest -C Release -V -j --output-on-failure
  - cd ..
