##############################################################################
# project configuration
##############################################################################

# Enable C++
language: cpp

dist: trusty
sudo: required
group: edge
addons:
  apt:
    packages:
      - "python3"
      - "python3-pip"

# Set python version to 3.6
python:
  - "3.6"

##############################################################################
# branch settings
##############################################################################
branches:
  except:
    - prototype/.*
    - gh-pages

##############################################################################
# Stages
##############################################################################

stages:
  - test
  - validate
  - deploy

##############################################################################
# Agent Setup
##############################################################################

osx_agent: &osx_agent
  os: osx
  language: generic
  compiler: clang
  env:
    - C_COMPILER=clang
    - CXX_COMPILER=clang++

deploy_agent: &deploy_agent
  os: linux
  compiler: gcc
  env:
    - C_COMPILER=gcc-8
    - CXX_COMPILER=g++-8
  addons:
    apt:
      sources: ['ubuntu-toolchain-r-test']
      packages: ['g++-8', 'ninja-build']

validate_agent: &validate_agent
  os: linux
  compiler: clang
  addons:
    apt:
      sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-6.0']
      packages: ['g++-6', 'clang-6.0', 'ninja-build']

##############################################################################
# Jobs
##############################################################################

jobs:
  include:

    ###############
    # Linux : GCC #
    ###############

    - name: "Linux g++-5 unit tests"
      stage: test
      os: linux
      compiler: gcc
      env:
        - C_COMPILER=gcc-5
        - CXX_COMPILER=g++-5
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-5', 'ninja-build']

    - name: "Linux g++-6 unit tests"
      stage: test
      os: linux
      compiler: gcc
      env:
        - C_COMPILER=gcc-6
        - CXX_COMPILER=g++-6
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-6', 'ninja-build']

    - name: "Linux g++-7 unit tests"
      stage: test
      os: linux
      compiler: gcc
      env:
        - C_COMPILER=gcc-7
        - CXX_COMPILER=g++-7
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-7', 'ninja-build']

    - name: "Linux g++-8 unit tests"
      stage: test
      os: linux
      compiler: gcc
      env:
        - C_COMPILER=gcc-8
        - CXX_COMPILER=g++-8
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-8', 'ninja-build']

    #################
    # Linux : clang #
    #################

    - name: "Linux clang++-3.5 unit tests"
      stage: test
      os: linux
      compiler: clang
      env:
        - C_COMPILER=clang-3.5
        - CXX_COMPILER=clang++-3.5
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.5']
          packages: ['g++-6', 'clang-3.5', 'ninja-build']

    - name: "Linux clang++-3.6 unit tests"
      stage: test
      os: linux
      compiler: clang
      env:
        - C_COMPILER=clang-3.6
        - CXX_COMPILER=clang++-3.6
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.6']
          packages: ['g++-6', 'clang-3.6', 'ninja-build']

    - name: "Linux clang++-3.7 unit tests"
      stage: test
      os: linux
      compiler: clang
      env:
        - C_COMPILER=clang-3.7
        - CXX_COMPILER=clang++-3.7
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.7']
          packages: ['g++-6', 'clang-3.7', 'ninja-build']

    - name: "Linux clang++-3.8 unit tests"
      stage: test
      os: linux
      compiler: clang
      env:
        - C_COMPILER=clang-3.8
        - CXX_COMPILER=clang++-3.8
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-6', 'clang-3.8', 'ninja-build']

    - name: "Linux clang++-3.9 unit tests"
      stage: test
      os: linux
      compiler: clang
      env:
        - C_COMPILER=clang-3.9
        - CXX_COMPILER=clang++-3.9
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-6', 'clang-3.9', 'ninja-build']

    - name: "Linux clang++-4.0 unit tests"
      stage: test
      os: linux
      compiler: clang
      env:
        - C_COMPILER=clang-4.0
        - CXX_COMPILER=clang++-4.0
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-4.0']
          packages: ['g++-6', 'clang-4.0', 'ninja-build']

    - name: "Linux clang++-5.0 unit tests"
      stage: test
      os: linux
      compiler: clang
      env:
        - C_COMPILER=clang-5.0
        - CXX_COMPILER=clang++-5.0
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-5.0']
          packages: ['g++-6', 'clang-5.0', 'ninja-build']

    - name: "Linux clang++-6.0 unit tests"
      stage: test
      os: linux
      compiler: clang
      env:
        - C_COMPILER=clang-6.0
        - CXX_COMPILER=clang++-6.0
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-6.0']
          packages: ['g++-6', 'clang-6.0', 'ninja-build']

    #################
    # macOS : clang #
    #################

    - <<: *osx_agent
      stage: test
      name: "macOS xcode8.3 unit tests"
      osx_image: xcode8.3

    - <<: *osx_agent
      stage: test
      name: "macOS xcode9 unit tests"
      osx_image: xcode9

    - <<: *osx_agent
      stage: test
      name: "macOS xcode9.1 unit tests"
      osx_image: xcode9.1

    - <<: *osx_agent
      stage: test
      name: "macOS xcode9.2 unit tests"
      osx_image: xcode9.2

    - <<: *osx_agent
      stage: test
      name: "macOS xcode9.3 unit tests"
      osx_image: xcode9.3

    - <<: *osx_agent
      stage: test
      name: "macOS xcode9.4 unit tests"
      osx_image: xcode9.4

    - <<: *osx_agent
      stage: test
      name: "macOS xcode10 unit tests"
      osx_image: xcode10

    ##########
    # Deploy #
    ##########

    - <<: *deploy_agent
      stage: deploy
      name: "Conan Deploy"
      if: branch = develop AND type = push
      script: .travis/deploy_conan.sh edge

    - <<: *deploy_agent
      stage: deploy
      name: "Conan Deploy"
      if: branch ~= ^release/.*$ AND type = push
      script: .travis/deploy_conan.sh prerelease

    - <<: *deploy_agent
      stage: deploy
      name: "Conan Deploy"
      if: branch = master AND type = push
      script: .travis/deploy_conan.sh stable

    - <<: *deploy_agent
      stage: deploy
      name: "Deploy Doxygen"
      if: branch = master AND type = push
      script: .travis/deploy_doxygen.sh


    ###########################
    # Linux : clang sanitizer #
    ###########################

    - <<: *validate_agent
      stage: validate
      name: "Linux clang++-6.0 Undefined Behavior Sanitizer"
      env:
        - C_COMPILER=clang-6.0
        - CXX_COMPILER=clang++-6.0
        - CMAKE_OPTIONS="-DBIT_CORE_ENABLE_UBSAN=1 -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=gold"

    - <<: *validate_agent
      stage: validate
      name: "Linux clang++-6.0 Address Sanitizer"
      env:
        - C_COMPILER=clang-6.0
        - CXX_COMPILER=clang++-6.0
        - CMAKE_OPTIONS="-DBIT_CORE_ENABLE_ASAN=1 -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=gold"

    # - <<: *validate_agent
    #   stage: validate
    #   name: "Linux clang++-6.0 Memory Sanitizer"
    #   env:
    #     - C_COMPILER=clang-6.0
    #     - CXX_COMPILER=clang++-6.0
    #     - CMAKE_OPTIONS="-DBIT_CORE_ENABLE_MSAN=1 -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=gold"

    - <<: *validate_agent
      stage: validate
      name: "Linux clang++-6.0 Thread Sanitizer"
      env:
        - C_COMPILER=clang-6.0
        - CXX_COMPILER=clang++-6.0
        - CMAKE_OPTIONS="-DBIT_CORE_ENABLE_TSAN=1 -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=gold"

    - stage: validate
      name: "Linux g++-7 Code Coverage"
      os: linux
      compiler: gcc
      env:
        - C_COMPILER=gcc-7
        - CXX_COMPILER=g++-7
        - CMAKE_OPTIONS="-DBIT_CORE_ENABLE_COVERAGE=1"
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-7', 'ninja-build']
      after_success:
        - coveralls --build-root "$(pwd)/${build_directory}" -E ".*CMakeFiles.*" -e test -e test_package --gcov 'gcov-7' --gcov-options '\-lpr'

##############################################################################
# 1. Install Step
##############################################################################

# Update all package managers
before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      sudo apt-get update
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew update
    fi

# Install cmake, ninja, pip, and conan
install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      sudo apt-get install python3-pip
      sudo python3 -m pip install --upgrade --force setuptools
      sudo python3 -m pip install --upgrade --force pip
      python3 -m pip install --user conan
      # This could be optimized by only installing on coveralls step...
      python3 -m pip install --user cpp-coveralls==0.3.11
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew install cmake ninja python3 || true
      brew upgrade cmake ninja python3 || true
      python3 -m pip install conan==1.7.4
    fi


##############################################################################
# 2. Build Step
##############################################################################

before_script:
  # Export the C/C++ compiler
  - |
    if [[ "${C_COMPILER}" != "" ]]; then
      export CC=${C_COMPILER}
    fi
  - |
    if [[ "${CXX_COMPILER}" != "" ]]; then
      export CXX=${CXX_COMPILER}
    fi

  # Dump build information
  - uname -a
  - $CXX --version
  - cmake --version
  - ninja --version
  - python3 --version
  - conan --version

  # Setup the remote, detect the architecture
  - conan remote add cppbits https://api.bintray.com/conan/cppbits/conan
  - conan user
  - conan profile new default --detect
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      conan profile update "settings.compiler.libcxx=libstdc++11" default
    fi

script:
  # Make build directory and install dependencies
  - build_directory="cmake-build-release"
  - mkdir -p "${build_directory}" && cd "${build_directory}"
  - conan install .. -odev_setup=True

  # Compile and execute unit tests
  - cmake .. -G"Ninja" -DBIT_CORE_COMPILE_UNIT_TESTS=On -DBIT_CORE_COMPILE_SELF_CONTAINMENT_TESTS=On ${CMAKE_OPTIONS}
  - cmake --build . --config Release
  - ctest -C Release -V -j --output-on-failure
  - cd ..
